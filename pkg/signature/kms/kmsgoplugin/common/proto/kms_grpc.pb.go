// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: kms.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KMSService_SetState_FullMethodName            = "/kms.KMSService/SetState"
	KMSService_SupportedAlgorithms_FullMethodName = "/kms.KMSService/SupportedAlgorithms"
	KMSService_DefaultAlgorithm_FullMethodName    = "/kms.KMSService/DefaultAlgorithm"
	KMSService_CreateKey_FullMethodName           = "/kms.KMSService/CreateKey"
	KMSService_SignMessage_FullMethodName         = "/kms.KMSService/SignMessage"
	KMSService_VerifySignature_FullMethodName     = "/kms.KMSService/VerifySignature"
	KMSService_PublicKey_FullMethodName           = "/kms.KMSService/PublicKey"
	KMSService_CryptoSigner_FullMethodName        = "/kms.KMSService/CryptoSigner"
)

// KMSServiceClient is the client API for KMSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KMSServiceClient interface {
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	SupportedAlgorithms(ctx context.Context, in *SupportedAlgorithmsRequest, opts ...grpc.CallOption) (*SupportedAlgorithmsResponse, error)
	DefaultAlgorithm(ctx context.Context, in *DefaultAlgorithmRequest, opts ...grpc.CallOption) (*DefaultAlgorithmResponse, error)
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	SignMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SignMessageRequest, SignMessageResponse], error)
	VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error)
	PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	CryptoSigner(ctx context.Context, in *CryptoSignerRequest, opts ...grpc.CallOption) (*CryptoSignerResponse, error)
}

type kMSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKMSServiceClient(cc grpc.ClientConnInterface) KMSServiceClient {
	return &kMSServiceClient{cc}
}

func (c *kMSServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, KMSService_SetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSServiceClient) SupportedAlgorithms(ctx context.Context, in *SupportedAlgorithmsRequest, opts ...grpc.CallOption) (*SupportedAlgorithmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportedAlgorithmsResponse)
	err := c.cc.Invoke(ctx, KMSService_SupportedAlgorithms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSServiceClient) DefaultAlgorithm(ctx context.Context, in *DefaultAlgorithmRequest, opts ...grpc.CallOption) (*DefaultAlgorithmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultAlgorithmResponse)
	err := c.cc.Invoke(ctx, KMSService_DefaultAlgorithm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, KMSService_CreateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSServiceClient) SignMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SignMessageRequest, SignMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KMSService_ServiceDesc.Streams[0], KMSService_SignMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SignMessageRequest, SignMessageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KMSService_SignMessageClient = grpc.ClientStreamingClient[SignMessageRequest, SignMessageResponse]

func (c *kMSServiceClient) VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifySignatureResponse)
	err := c.cc.Invoke(ctx, KMSService_VerifySignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSServiceClient) PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, KMSService_PublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSServiceClient) CryptoSigner(ctx context.Context, in *CryptoSignerRequest, opts ...grpc.CallOption) (*CryptoSignerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CryptoSignerResponse)
	err := c.cc.Invoke(ctx, KMSService_CryptoSigner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KMSServiceServer is the server API for KMSService service.
// All implementations must embed UnimplementedKMSServiceServer
// for forward compatibility.
type KMSServiceServer interface {
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	SupportedAlgorithms(context.Context, *SupportedAlgorithmsRequest) (*SupportedAlgorithmsResponse, error)
	DefaultAlgorithm(context.Context, *DefaultAlgorithmRequest) (*DefaultAlgorithmResponse, error)
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	SignMessage(grpc.ClientStreamingServer[SignMessageRequest, SignMessageResponse]) error
	VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error)
	PublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error)
	CryptoSigner(context.Context, *CryptoSignerRequest) (*CryptoSignerResponse, error)
	mustEmbedUnimplementedKMSServiceServer()
}

// UnimplementedKMSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKMSServiceServer struct{}

func (UnimplementedKMSServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedKMSServiceServer) SupportedAlgorithms(context.Context, *SupportedAlgorithmsRequest) (*SupportedAlgorithmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedAlgorithms not implemented")
}
func (UnimplementedKMSServiceServer) DefaultAlgorithm(context.Context, *DefaultAlgorithmRequest) (*DefaultAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultAlgorithm not implemented")
}
func (UnimplementedKMSServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKMSServiceServer) SignMessage(grpc.ClientStreamingServer[SignMessageRequest, SignMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedKMSServiceServer) VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}
func (UnimplementedKMSServiceServer) PublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (UnimplementedKMSServiceServer) CryptoSigner(context.Context, *CryptoSignerRequest) (*CryptoSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptoSigner not implemented")
}
func (UnimplementedKMSServiceServer) mustEmbedUnimplementedKMSServiceServer() {}
func (UnimplementedKMSServiceServer) testEmbeddedByValue()                    {}

// UnsafeKMSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KMSServiceServer will
// result in compilation errors.
type UnsafeKMSServiceServer interface {
	mustEmbedUnimplementedKMSServiceServer()
}

func RegisterKMSServiceServer(s grpc.ServiceRegistrar, srv KMSServiceServer) {
	// If the following call pancis, it indicates UnimplementedKMSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KMSService_ServiceDesc, srv)
}

func _KMSService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSService_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSService_SupportedAlgorithms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedAlgorithmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSServiceServer).SupportedAlgorithms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSService_SupportedAlgorithms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSServiceServer).SupportedAlgorithms(ctx, req.(*SupportedAlgorithmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSService_DefaultAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSServiceServer).DefaultAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSService_DefaultAlgorithm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSServiceServer).DefaultAlgorithm(ctx, req.(*DefaultAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSService_SignMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KMSServiceServer).SignMessage(&grpc.GenericServerStream[SignMessageRequest, SignMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KMSService_SignMessageServer = grpc.ClientStreamingServer[SignMessageRequest, SignMessageResponse]

func _KMSService_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSServiceServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSService_VerifySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSServiceServer).VerifySignature(ctx, req.(*VerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSService_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSServiceServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSService_PublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSServiceServer).PublicKey(ctx, req.(*PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSService_CryptoSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSServiceServer).CryptoSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSService_CryptoSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSServiceServer).CryptoSigner(ctx, req.(*CryptoSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KMSService_ServiceDesc is the grpc.ServiceDesc for KMSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KMSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kms.KMSService",
	HandlerType: (*KMSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _KMSService_SetState_Handler,
		},
		{
			MethodName: "SupportedAlgorithms",
			Handler:    _KMSService_SupportedAlgorithms_Handler,
		},
		{
			MethodName: "DefaultAlgorithm",
			Handler:    _KMSService_DefaultAlgorithm_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _KMSService_CreateKey_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _KMSService_VerifySignature_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _KMSService_PublicKey_Handler,
		},
		{
			MethodName: "CryptoSigner",
			Handler:    _KMSService_CryptoSigner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignMessage",
			Handler:       _KMSService_SignMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kms.proto",
}
