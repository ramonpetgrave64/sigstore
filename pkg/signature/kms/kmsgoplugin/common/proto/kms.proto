syntax = "proto3";
package kms;

option go_package = "github.com/sigstore/sigstore/pkg/signature/kms/kmsgoplugin/proto";



service KMSService {
    rpc SetState(SetStateRequest) returns (SetStateResponse);
    rpc SupportedAlgorithms(SupportedAlgorithmsRequest) returns (SupportedAlgorithmsResponse);
    rpc DefaultAlgorithm(DefaultAlgorithmRequest) returns (DefaultAlgorithmResponse);
    rpc CreateKey(CreateKeyRequest) returns (CreateKeyResponse);
    rpc SignMessage(stream SignMessageRequest) returns (SignMessageResponse);
    rpc VerifySignature(VerifySignatureRequest) returns (VerifySignatureResponse);
    rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse);
    rpc CryptoSigner(CryptoSignerRequest) returns (CryptoSignerResponse);
}

message SetStateRequest {
    string key_resource_id = 1;
    bytes hash_func_data = 2;
}

message SetStateResponse {

}

message SupportedAlgorithmsRequest {}

message SupportedAlgorithmsResponse {
    repeated string supported_algorithms = 1;
}

message DefaultAlgorithmRequest {}

message DefaultAlgorithmResponse {
    string default_agorithm = 1;
}

message CreateKeyRequest {
    string algorithm = 1;
}

message CreateKeyResponse {
    bytes public_key_data = 1;
}

message SignMessageRequest {
    bytes message = 1;
    SignOptions sign_options = 2;
}

message SignMessageResponse {
    bytes signature = 1; 
}

message VerifySignatureRequest {
    bytes signature = 1;
    bytes message = 2;
    VerifyOption verify_options = 3;
}

message VerifySignatureResponse {}

message PublicKeyRequest {
}

message PublicKeyResponse {
   bytes public_key_data = 1;
}

message CryptoSignerRequest {
}

message CryptoSignerResponse {
}

message SignOptions {
    MessageOption message_option = 1;
}


message VerifyOption {
    MessageOption message_option = 1;
}

message MessageOption {
    bytes digest_data = 1;
    SignerOpts signer_opts = 2;
}

message SignerOpts {
    bytes hash_func_data = 1;
}